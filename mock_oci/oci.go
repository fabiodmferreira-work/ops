// Code generated by MockGen. DO NOT EDIT.
// Source: oci/oci.go

// Package mock_oci is a generated GoMock package.
package mock_oci

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	core "github.com/oracle/oci-go-sdk/core"
	objectstorage "github.com/oracle/oci-go-sdk/objectstorage"
	reflect "reflect"
)

// MockComputeService is a mock of ComputeService interface
type MockComputeService struct {
	ctrl     *gomock.Controller
	recorder *MockComputeServiceMockRecorder
}

// MockComputeServiceMockRecorder is the mock recorder for MockComputeService
type MockComputeServiceMockRecorder struct {
	mock *MockComputeService
}

// NewMockComputeService creates a new mock instance
func NewMockComputeService(ctrl *gomock.Controller) *MockComputeService {
	mock := &MockComputeService{ctrl: ctrl}
	mock.recorder = &MockComputeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComputeService) EXPECT() *MockComputeServiceMockRecorder {
	return m.recorder
}

// CreateImage mocks base method
func (m *MockComputeService) CreateImage(ctx context.Context, request core.CreateImageRequest) (core.CreateImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", ctx, request)
	ret0, _ := ret[0].(core.CreateImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockComputeServiceMockRecorder) CreateImage(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockComputeService)(nil).CreateImage), ctx, request)
}

// ListImages mocks base method
func (m *MockComputeService) ListImages(ctx context.Context, request core.ListImagesRequest) (core.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx, request)
	ret0, _ := ret[0].(core.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockComputeServiceMockRecorder) ListImages(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockComputeService)(nil).ListImages), ctx, request)
}

// DeleteImage mocks base method
func (m *MockComputeService) DeleteImage(ctx context.Context, request core.DeleteImageRequest) (core.DeleteImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, request)
	ret0, _ := ret[0].(core.DeleteImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockComputeServiceMockRecorder) DeleteImage(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockComputeService)(nil).DeleteImage), ctx, request)
}

// ListInstances mocks base method
func (m *MockComputeService) ListInstances(ctx context.Context, request core.ListInstancesRequest) (core.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", ctx, request)
	ret0, _ := ret[0].(core.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances
func (mr *MockComputeServiceMockRecorder) ListInstances(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockComputeService)(nil).ListInstances), ctx, request)
}

// LaunchInstance mocks base method
func (m *MockComputeService) LaunchInstance(ctx context.Context, request core.LaunchInstanceRequest) (core.LaunchInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInstance", ctx, request)
	ret0, _ := ret[0].(core.LaunchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchInstance indicates an expected call of LaunchInstance
func (mr *MockComputeServiceMockRecorder) LaunchInstance(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInstance", reflect.TypeOf((*MockComputeService)(nil).LaunchInstance), ctx, request)
}

// MockComputeManagementService is a mock of ComputeManagementService interface
type MockComputeManagementService struct {
	ctrl     *gomock.Controller
	recorder *MockComputeManagementServiceMockRecorder
}

// MockComputeManagementServiceMockRecorder is the mock recorder for MockComputeManagementService
type MockComputeManagementServiceMockRecorder struct {
	mock *MockComputeManagementService
}

// NewMockComputeManagementService creates a new mock instance
func NewMockComputeManagementService(ctrl *gomock.Controller) *MockComputeManagementService {
	mock := &MockComputeManagementService{ctrl: ctrl}
	mock.recorder = &MockComputeManagementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComputeManagementService) EXPECT() *MockComputeManagementServiceMockRecorder {
	return m.recorder
}

// CreateInstanceConfiguration mocks base method
func (m *MockComputeManagementService) CreateInstanceConfiguration(ctx context.Context, request core.CreateInstanceConfigurationRequest) (core.CreateInstanceConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceConfiguration", ctx, request)
	ret0, _ := ret[0].(core.CreateInstanceConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceConfiguration indicates an expected call of CreateInstanceConfiguration
func (mr *MockComputeManagementServiceMockRecorder) CreateInstanceConfiguration(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceConfiguration", reflect.TypeOf((*MockComputeManagementService)(nil).CreateInstanceConfiguration), ctx, request)
}

// DeleteInstanceConfiguration mocks base method
func (m *MockComputeManagementService) DeleteInstanceConfiguration(ctx context.Context, request core.DeleteInstanceConfigurationRequest) (core.DeleteInstanceConfigurationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceConfiguration", ctx, request)
	ret0, _ := ret[0].(core.DeleteInstanceConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceConfiguration indicates an expected call of DeleteInstanceConfiguration
func (mr *MockComputeManagementServiceMockRecorder) DeleteInstanceConfiguration(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceConfiguration", reflect.TypeOf((*MockComputeManagementService)(nil).DeleteInstanceConfiguration), ctx, request)
}

// CreateInstancePool mocks base method
func (m *MockComputeManagementService) CreateInstancePool(ctx context.Context, request core.CreateInstancePoolRequest) (core.CreateInstancePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstancePool", ctx, request)
	ret0, _ := ret[0].(core.CreateInstancePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstancePool indicates an expected call of CreateInstancePool
func (mr *MockComputeManagementServiceMockRecorder) CreateInstancePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancePool", reflect.TypeOf((*MockComputeManagementService)(nil).CreateInstancePool), ctx, request)
}

// StartInstancePool mocks base method
func (m *MockComputeManagementService) StartInstancePool(ctx context.Context, request core.StartInstancePoolRequest) (core.StartInstancePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstancePool", ctx, request)
	ret0, _ := ret[0].(core.StartInstancePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstancePool indicates an expected call of StartInstancePool
func (mr *MockComputeManagementServiceMockRecorder) StartInstancePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstancePool", reflect.TypeOf((*MockComputeManagementService)(nil).StartInstancePool), ctx, request)
}

// StopInstancePool mocks base method
func (m *MockComputeManagementService) StopInstancePool(ctx context.Context, request core.StopInstancePoolRequest) (core.StopInstancePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstancePool", ctx, request)
	ret0, _ := ret[0].(core.StopInstancePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstancePool indicates an expected call of StopInstancePool
func (mr *MockComputeManagementServiceMockRecorder) StopInstancePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstancePool", reflect.TypeOf((*MockComputeManagementService)(nil).StopInstancePool), ctx, request)
}

// MockStorageService is a mock of StorageService interface
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// PutObject mocks base method
func (m *MockStorageService) PutObject(ctx context.Context, request objectstorage.PutObjectRequest) (objectstorage.PutObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, request)
	ret0, _ := ret[0].(objectstorage.PutObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject
func (mr *MockStorageServiceMockRecorder) PutObject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockStorageService)(nil).PutObject), ctx, request)
}
